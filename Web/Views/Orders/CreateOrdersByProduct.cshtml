@model Application.DTO.Products.ProductBuyer
@using System.Security.Claims
<div class="min-h-screen flex flex-col md:flex-row max-w-6xl mx-auto p-6">
    <!-- Form chính bao bọc toàn bộ nội dung -->
    <form asp-action="CreateOrdersByProduct" method="post" class=" space-y-6 flex-1 flex flex-col md:flex-row">
        <!-- Left Column - Customer Information -->
        <div class="flex-1 bg-white shadow-md p-6 md:p-10 rounded-lg space-y-6">
            <!-- Email Field -->
            <div class="space-y-1">
                <input type="email"
                       name="ShipEmail"
                       placeholder="Email*"
                       class="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-400 focus:border-blue-400 transition peer"
                       required>
                <span class="hidden text-sm text-red-500 mt-1 peer-invalid:peer-[&:not(:placeholder-shown)]:block">
                    Vui lòng nhập email hợp lệ
                </span>
            </div>

            <!-- Name Field -->
            <div class="space-y-1">
                <input type="text"
                       name="ShipName"
                       placeholder="Họ tên*"
                       class="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-400 focus:border-blue-400 transition peer"
                       required>
                <span class="hidden text-sm text-red-500 mt-1 peer-invalid:peer-[&:not(:placeholder-shown)]:block">
                    Vui lòng nhập họ tên
                </span>
            </div>

            <!-- Address Field -->
            <div class="space-y-1">
                <input type="text"
                       name="ShipAddress"
                       placeholder="Địa chỉ*"
                       class="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-400 focus:border-blue-400 transition peer"
                       required>
                <span class="hidden text-sm text-red-500 mt-1 peer-invalid:peer-[&:not(:placeholder-shown)]:block">
                    Vui lòng nhập địa chỉ
                </span>
            </div>

            <!-- Phone Field -->
            <div class="space-y-1">
                <input type="tel"
                       name="ShipPhoneNumber"
                       placeholder="Số điện thoại*"
                       class="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-400 focus:border-blue-400 transition peer"
                       pattern="[0-9]{10}"
                       required>
                <span class="hidden text-sm text-red-500 mt-1 peer-invalid:peer-[&:not(:placeholder-shown)]:block">
                    Vui lòng nhập số điện thoại hợp lệ (10 số)
                </span>
            </div>

            <input type="hidden" id="userIdInput" name="UserId" value="@User.FindFirstValue(ClaimTypes.NameIdentifier)" />
            <input type="hidden" id="currentDateTime" name="OrderDate" />
            <input type="hidden" name="product_id" value="@Model.product_id" />
            <input type="hidden" name="name_product" value="@Model.product_name" />
            <input type="hidden" name="Quantity" value="@Model.soluong" />
            <input type="hidden" name="Price" value="@Model.price" />
            <input type="hidden" name="Size" value="@Model.size" />
            <input type="hidden" name="Cata_product" value="@Model.variant" />
            <input type="hidden" name="Totalprice" value="@((Model.price * Model.soluong) + 30000)" />
            <input type="hidden" name="ShippingFee" value="30000" />

            <!-- Payment Methods -->
            <div class="bg-white p-6 rounded-lg shadow-sm border border-gray-100">
                <h2 class="text-lg font-semibold text-gray-800 mb-4">Phương thức thanh toán</h2>
                <p class="text-gray-600 text-sm mb-4">Mọi giao dịch đều an toàn và được mã hóa.</p>

                <div class="border rounded-md overflow-hidden">
                    <!-- Bank Transfer -->
                    <label class="block border-b cursor-pointer">
                        <div class="p-4 flex items-center justify-between hover:bg-gray-50 payment-option" id="option-bank">
                            <div class="flex items-center space-x-3">
                                <div class="w-5 h-5 border border-gray-300 rounded-full flex items-center justify-center payment-radio">
                                    <div class="w-3 h-3 bg-blue-600 rounded-full hidden payment-radio-selected"></div>
                                </div>
                                <span class="font-medium">Chuyển khoản ngân hàng</span>
                            </div>
                            <div class="flex space-x-2">
                                <img src="https://rubee.com.vn/wp-content/uploads/2022/01/logo-ngan-hang-bidv.jpg" alt="BIDV" class="h-5">
                                <img src="http://dcdesign.vn/image/data/DC%20Design/BAI%20VIET%20CHUYEN%20NGANH/Logo%20dep/logo-vietcombank.jpg" alt="VCB" class="h-5">
                                <img src="https://www.mbbank.com.vn/images/logo.png" alt="MB Bank" class="h-5">
                                <img src="https://tpb.vn/wps/wcm/connect/a85b875d-ad73-4591-8fd5-e8417a69c316/logo-tpb.png?MOD=AJPERES&CACHEID=ROOTWORKSPACE-a85b875d-ad73-4591-8fd5-e8417a69c316-pjudclH" alt="TP Bank" class="h-5">
                            </div>
                            <input type="radio" name="PaymentMethod" value="bank_transfer" class="hidden payment-input" required>
                        </div>
                    </label>
                    <div class="hidden p-4 bg-gray-50 border-t payment-details" id="bank-details">
                        <p class="text-sm text-gray-600">
                            Đơn hàng của bạn sẽ được chuẩn bị và vận chuyển sau khi chúng tôi nhận được thanh toán của bạn.
                            Vui lòng bao gồm "Đơn hàng + (số đơn hàng)" trong mô tả thanh toán.
                            Ví dụ: "Đơn hàng 0987654321"
                        </p>
                    </div>

                    <!-- Cash on Delivery -->
                    <label class="block border-b cursor-pointer">
                        <div class="p-4 flex items-center justify-between hover:bg-gray-50 payment-option" id="option-cod">
                            <div class="flex items-center space-x-3">
                                <div class="w-5 h-5 border border-gray-300 rounded-full flex items-center justify-center payment-radio">
                                    <div class="w-3 h-3 bg-blue-600 rounded-full hidden payment-radio-selected"></div>
                                </div>
                                <span class="font-medium">Thanh toán khi nhận hàng (COD)</span>
                            </div>
                            <input type="radio" name="PaymentMethod" value="cod" class="hidden payment-input">
                        </div>
                    </label>
                    <div class="hidden p-4 bg-gray-50 border-t payment-details" id="cod-details">
                        <p class="text-sm text-gray-600">
                            Thanh toán bằng tiền mặt khi nhận hàng. Chỉ áp dụng cho các đơn hàng trong phạm vi Việt Nam.
                        </p>
                    </div>

                    <!-- PayPal -->
                    <label class="block cursor-pointer">
                        <div class="p-4 flex items-center justify-between hover:bg-gray-50 payment-option" id="option-paypal">
                            <div class="flex items-center space-x-3">
                                <div class="w-5 h-5 border border-gray-300 rounded-full flex items-center justify-center payment-radio">
                                    <div class="w-3 h-3 bg-blue-600 rounded-full hidden payment-radio-selected"></div>
                                </div>
                                <span class="font-medium">PayPal</span>
                            </div>
                            <div>
                                <img src="https://www.paypalobjects.com/webstatic/mktg/logo/pp_cc_mark_37x23.jpg" alt="PayPal" class="h-6">
                            </div>
                            <input type="radio" name="PaymentMethod" value="paypal" class="hidden payment-input">
                        </div>
                    </label>
                    <div class="hidden p-4 bg-gray-50 border-t payment-details" id="paypal-details">
                        <p class="text-sm text-gray-600">
                            Bạn sẽ được chuyển hướng đến PayPal để hoàn tất giao dịch mua hàng một cách an toàn.
                        </p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Right Column - Order Summary -->
        <div class="bg-gray-100 p-6 md:p-10 md:w-1/3">
            <div class="border-b border-gray-300 pb-6">
                <div class="flex items-start mb-4">
                    <div class="relative mr-4">
                        <div class="w-16 h-20 bg-gray-200 rounded-md relative">
                            <img src="@Model.img.ImagePath" alt="@Model.variant" class="w-full h-full object-cover rounded-md">
                            <span class="absolute -top-2 -right-2 w-5 h-5 bg-gray-500 rounded-full text-white text-xs flex items-center justify-center">@Model.soluong</span>
                        </div>
                    </div>
                    <div class="flex-1">
                        <h3 class="font-semibold">@Model.product_name</h3>
                        <p class="text-sm text-gray-600">@Model.size</p>
                    </div>
                    <div class="text-right">
                        <p class="font-semibold">@string.Format("{0:N0}", Model.price) ₫</p>
                    </div>
                </div>
            </div>

            <div class="py-4 border-b border-gray-300">
                <div class="flex justify-between mb-2">
                    <span>Tạm tính</span>
                    <span class="font-semibold">@string.Format("{0:N0}", Model.price * Model.soluong) ₫</span>
                </div>
                <div class="flex justify-between mb-2">
                    <span class="font-semibold">Phí vận chuyển</span>
                    <span class="font-semibold">30.000₫</span>
                </div>
            </div>

            <div class="pt-4">
                <div class="flex justify-between items-center mb-4">
                    <span class="text-lg font-bold">Tổng cộng</span>
                    <div class="text-right">
                        <span class="text-xl font-bold ml-2">@string.Format("{0:N0}", (Model.price * Model.soluong) + 30000) ₫</span>
                    </div>
                </div>
            </div>

            <!-- Phần ghi chú -->
            <div class="pt-4">
                <div class="flex justify-between items-center mb-4">
                    <span class="text-sm font-semibold">Ghi chú</span>
                </div>
                <div class="text-gray-600">
                    <textarea id="note" name="Note" rows="4" class="w-full p-2 border rounded-md" placeholder="Nhập bất kỳ hướng dẫn hoặc ghi chú đặc biệt nào tại đây..."></textarea>
                </div>
            </div>
            <button type="submit" class=" mt-2 w-full bg-blue-600 hover:bg-blue-700 text-white p-4 rounded-lg text-base font-medium transition-colors flex items-center justify-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                Hoàn tất đơn hàng
            </button>
        </div>
    </form>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
           // Set current date and time
           document.getElementById('currentDateTime').value = new Date().toISOString();

           // Payment method selection
           const paymentOptions = document.querySelectorAll('.payment-option');
           const paymentDetails = document.querySelectorAll('.payment-details');
           const paymentInputs = document.querySelectorAll('.payment-input');
           const paymentRadios = document.querySelectorAll('.payment-radio');
           const paymentRadioSelected = document.querySelectorAll('.payment-radio-selected');

           paymentOptions.forEach((option, index) => {
               option.addEventListener('click', function() {
                   // Hide all details
                   paymentDetails.forEach(detail => detail.classList.add('hidden'));

                   // Uncheck all radios
                   paymentInputs.forEach(input => input.checked = false);

                   // Hide all selected indicators
                   paymentRadioSelected.forEach(radio => radio.classList.add('hidden'));

                   // Show selected details
                   const optionId = this.id;
                   const detailsId = optionId.replace('option-', '') + '-details';
                   document.getElementById(detailsId).classList.remove('hidden');

                   // Check the radio
                   paymentInputs[index].checked = true;

                   // Show selected indicator
                   paymentRadioSelected[index].classList.remove('hidden');
               });
           });

           // Form validation
           const form = document.getElementById('checkout-form');
           const validationModal = document.getElementById('validation-modal');
           const validationMessage = document.getElementById('validation-message');
           const closeValidation = document.getElementById('close-validation');

           form.addEventListener('submit', function(e) {
               let isValid = true;
               let errorMessage = '';

               // Email validation
               const email = document.getElementById('email');
               const emailError = document.getElementById('email-error');
               const emailRegex = /^[^\s@@]+@@[^\s@@]+\.[^\s@@]+$/;

               if (!emailRegex.test(email.value)) {
                   isValid = false;
                   email.classList.add('border-red-500');
                   emailError.classList.remove('hidden');
                   errorMessage = 'Please enter a valid email address.';
               } else {
                   email.classList.remove('border-red-500');
                   emailError.classList.add('hidden');
               }

               // Phone validation
               const phone = document.getElementById('phone');
               const phoneError = document.getElementById('phone-error');
               const phoneRegex = /^[0-9]{10,15}$/;

               if (!phoneRegex.test(phone.value.replace(/\D/g, ''))) {
                   isValid = false;
                   phone.classList.add('border-red-500');
                   phoneError.classList.remove('hidden');
                   errorMessage = errorMessage || 'Please enter a valid phone number.';
               } else {
                   phone.classList.remove('border-red-500');
                   phoneError.classList.add('hidden');
               }

               // Name validation
               const name = document.getElementById('name');
               const nameError = document.getElementById('name-error');

               if (name.value.trim().length < 3) {
                   isValid = false;
                   name.classList.add('border-red-500');
                   nameError.classList.remove('hidden');
                   errorMessage = errorMessage || 'Please enter your full name.';
               } else {
                   name.classList.remove('border-red-500');
                   nameError.classList.add('hidden');
               }

               // Address validation
               const address = document.getElementById('address');
               const addressError = document.getElementById('address-error');

               if (address.value.trim().length < 5) {
                   isValid = false;
                   address.classList.add('border-red-500');
                   addressError.classList.remove('hidden');
                   errorMessage = errorMessage || 'Please enter a valid address.';
               } else {
                   address.classList.remove('border-red-500');
                   addressError.classList.add('hidden');
               }

               // Payment method validation
               const paymentSelected = Array.from(paymentInputs).some(input => input.checked);

               if (!paymentSelected) {
                   isValid = false;
                   errorMessage = errorMessage || 'Please select a payment method.';
               }

               // Show validation modal if form is invalid
               if (!isValid) {
                   e.preventDefault();
                   validationMessage.textContent = errorMessage;
                   validationModal.classList.remove('hidden');
               }
           });

           // Close validation modal
           closeValidation.addEventListener('click', function() {
               validationModal.classList.add('hidden');
           });

           // Close modal when clicking outside
           validationModal.addEventListener('click', function(e) {
               if (e.target === validationModal) {
                   validationModal.classList.add('hidden');
               }
           });
       });
</script>